///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace OpenCart
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SelectAProduct recording.
    /// </summary>
    [TestModule("282e63d1-0191-40a6-ad43-e1c0f490a719", ModuleType.Recording, 1)]
    public partial class SelectAProduct : ITestModule
    {
        /// <summary>
        /// Holds an instance of the OpenCartRepository repository.
        /// </summary>
        public static OpenCartRepository repo = OpenCartRepository.Instance;

        static SelectAProduct instance = new SelectAProduct();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SelectAProduct()
        {
            ProductChosen = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SelectAProduct Instance
        {
            get { return instance; }
        }

#region Variables

        string _ProductChosen;

        /// <summary>
        /// Gets or sets the value of variable ProductChosen.
        /// </summary>
        [TestVariable("1ff5ff02-3a40-45b6-b7f1-dad13f350ee6")]
        public string ProductChosen
        {
            get { return _ProductChosen; }
            set { _ProductChosen = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(0));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'ApplicationUnderTest.SelectProduct.ProductMenu' at Center.", repo.ApplicationUnderTest.SelectProduct.ProductMenuInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.SelectProduct.ProductMenu.MoveTo();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SelectProduct.ProductCategory' at Center.", repo.ApplicationUnderTest.SelectProduct.ProductCategoryInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.SelectProduct.ProductCategory.Click();
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'ApplicationUnderTest.SelectProduct.Product'.", repo.ApplicationUnderTest.SelectProduct.ProductInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.SelectProduct.Product.EnsureVisible();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.SelectProduct.Product'", repo.ApplicationUnderTest.SelectProduct.ProductInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.SelectProduct.ProductInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down 5}'.", new RecordItemIndex(5));
            Keyboard.Press("{Down 5}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SelectProduct.Product' at Center.", repo.ApplicationUnderTest.SelectProduct.ProductInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.SelectProduct.Product.Click();
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.SelectProduct.Product' and assigning its value to variable 'ProductChosen'.", repo.ApplicationUnderTest.SelectProduct.ProductInfo, new RecordItemIndex(7));
            ProductChosen = repo.ApplicationUnderTest.SelectProduct.Product.Element.GetAttributeValueText("InnerText");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$ProductChosen) on item 'ApplicationUnderTest.SelectProduct.ProductItem'.", repo.ApplicationUnderTest.SelectProduct.ProductItemInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.SelectProduct.ProductItemInfo, "InnerText", ProductChosen);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
